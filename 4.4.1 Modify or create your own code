//server code

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define PORT 4444

int main()
{

	int sockfd, ret;
	 struct sockaddr_in serverAddr;

	int newSocket;
	struct sockaddr_in newAddr;

	socklen_t addr_size;

	char buffer[1024], bufferserver[1024];
	pid_t childpid;

	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if(sockfd < 0)
	{
		printf("[-]Error In Creating Socket.\n");
		exit(1);
	}
	printf("[+]Server Socket is Successful Created.\n");

	memset(&serverAddr, '\0', sizeof(serverAddr));
	serverAddr.sin_family = AF_INET;
	serverAddr.sin_port = htons(PORT);
	serverAddr.sin_addr.s_addr = inet_addr("192.168.121.5");

	ret = bind(sockfd, (struct sockaddr*)&serverAddr, sizeof(serverAddr));
	if(ret < 0)
	{
		printf("[-]Error In Binding.\n");
		exit(1);
	}
	printf("[+]Bind To Port %d\n", 4444);

	if(listen(sockfd, 10) == 0)
	{
		printf("[+]Listening....\n");
	}
	else
	{
		printf("[-]Error In Binding.\n");
	}


	while(1)
	{
		newSocket = accept(sockfd, (struct sockaddr*)&newAddr, &addr_size);
		if(newSocket < 0)
		{
			exit(1);
		}
		printf("\n");
		printf("%s has joined through port %d\n", inet_ntoa(newAddr.sin_addr), ntohs(newAddr.sin_port));
		printf("\n");

		if((childpid = fork()) == 0)
		{
			close(sockfd);

			while(1)
			{
				recv(newSocket, buffer, 1024, 0);
				if(strcmp(buffer, "BYE") == 0)
				{
					printf("%s has left!\n", inet_ntoa(newAddr.sin_addr));
					break;
				}
				else
				{
					printf("Cient with %s: \t%s\n ", inet_ntoa(newAddr.sin_addr), buffer);
					printf("You: \t");
                    scanf("%s", &bufferserver[0]);  //message from server
                    send(newSocket, bufferserver, strlen(bufferserver), 0);
                    bzero(buffer, sizeof(buffer));
                    if(strcmp(bufferserver, "BYE") == 0)
				    {
				    printf("Disconenected!\n");
				    break;
				    }
				    else
				    {
					bzero(bufferserver, sizeof(bufferserver));
				    }
				}
			}
		}

	}

	close(newSocket);


	return 0;
}
